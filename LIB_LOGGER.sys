%%%
  VERSION:1
  LANGUAGE:ENGLISH
%%%

MODULE LIB_LOGGER(SYSMODULE,NOSTEPIN)

  !*****************************************************
  ! * Copyright (C) 2013 Robert Andersson <rob@ernell.se>
  ! *
  ! * Licensed under the Apache License, Version 2.0 (the "License");
  ! * you may not use this file except in compliance with the License.
  ! * You may obtain a copy of the License at
  ! *
  ! *      http://www.apache.org/licenses/LICENSE-2.0
  ! *
  ! * Unless required by applicable law or agreed to in writing, software
  ! * distributed under the License is distributed on an "AS IS" BASIS,
  ! * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! * See the License for the specific language governing permissions and
  ! * limitations under the License.
  !*****************************************************

  !*****************************************************
  ! Module Name: LIB_LOGGER
  ! Version:     0.14b (syntax checked and partly tested)
  ! Description: Log utility
  ! Date:        2014-02-01
  ! Author:      Robert Andersson <rob@ernell.se>
  ! Internet:    http://github.com/ernell/ABB-RAPID-UTILITY-LIBRARY
  !*****************************************************

  ! Log filename
  LOCAL PERS string LOG_FILENAME:="TraceLog.txt";
  ! Log folder
  LOCAL PERS string LOG_FOLDER:="HOME:";

  ! Loglevels (dont change)
  CONST num LOG_OFF:=0;   ! No information (only necessary stuff)
  CONST num LOG_ERROR:=1; ! Show only errors
  CONST num LOG_INFO:=2;  ! Normal runtime Information (default)
  CONST num LOG_DEBUG:=3; ! A bit more detailed information
  CONST num LOG_TRACE:=4; ! Even more detailed information

  ! Hold current loglevel
  PERS num LOG_LEVEL:=2;
  
  ! Decimal precision
  LOCAL PERS num LOG_NUMPREC:=0;

  !*****************************************************
  ! Log
  ! Example:
  !   Log to screen only : Log "My message",LOG_DEBUG;
  !   Log to file only   : Log "My message",LOG_DEBUG\FILE;
  !   Log to screeen+file: Log "My message",LOG_DEBUG\BOTH;
  !*****************************************************
  
  LOCAL CONST num TYPE_FILE:=1;
  LOCAL CONST num TYPE_BOTH:=2;

  LOCAL FUNC string GetPrefix(num level)
    VAR string prefix;

    TEST level
    CASE LOG_ERROR:
      prefix:="E:";
    CASE LOG_INFO:
      prefix:="I:";
    CASE LOG_DEBUG:
      prefix:="D:";
    CASE LOG_TRACE:
      prefix:="T:";
    DEFAULT:
      prefix:="?:";
    ENDTEST
    RETURN prefix;
  ENDFUNC
  
  PROC Log(string message,num level,\switch FILE|switch BOTH)
    VAR num type:=0;
    VAR string prefix;
    VAR string log_message;
    
    IF Present(FILE) type:=TYPE_FILE;
    IF Present(BOTH) type:=TYPE_BOTH;

    IF level<=LOG_LEVEL THEN

      prefix:=GetPrefix(level);
      log_message:=prefix+message;
      IF type=TYPE_FILE THEN
        Log2File log_message;
      ELSEIF type=TYPE_BOTH THEN
        Log2File log_message;
        TPWrite log_message;
      ELSE
        TPWrite log_message;
      ENDIF
    ENDIF
  ENDPROC

  !*****************************************************
  ! Log together with a numeric value
  ! Example:
  !   LogNum "The value=",nValue,LOG_DEBUG;
  !*****************************************************
  PROC LogNum(string message,num value,num level,\switch FILE|switch BOTH)
    VAR num type:=0;
    VAR string prefix;
    VAR string log_message;

    IF Present(FILE) type:=TYPE_FILE;
    IF Present(BOTH) type:=TYPE_BOTH;

    IF level<=LOG_LEVEL THEN
      prefix:=GetPrefix(level);
      log_message:=prefix+message+NumToStr(value,LOG_NUMPREC);
      IF type=TYPE_FILE THEN
        Log2File log_message;
      ELSEIF type=TYPE_BOTH THEN
        Log2File log_message;
        TPWrite log_message;
      ELSE
        TPWrite log_message;
      ENDIF
    ENDIF
  ENDPROC

  !*****************************************************
  ! Set filename
  !*****************************************************
  PROC SetLogFilename(string filename)
    LOG_FILENAME:=filename;
  ENDPROC
  
  !*****************************************************
  ! Set folder
  !*****************************************************
  PROC SetLogFolder(string folder)
    LOG_FOLDER:=folder;
  ENDPROC

  !*****************************************************
  ! Set precision of numerical values
  !*****************************************************
  PROC SetLogNumPrec(num value)
    LOG_NUMPREC:=value;
    IF LOG_NUMPREC<0 LOG_NUMPREC:=0;
    IF LOG_NUMPREC>7 LOG_NUMPREC:=7;
  ENDPROC

  !*****************************************************
  ! Save message in the logfile (+date & timestamp)
  !*****************************************************
  PROC Log2File(string message)
    VAR iodev iodev1;

    Open LOG_FOLDER\File:=LOG_FILENAME,iodev1\Append;
    Write iodev1,message\NoNewLine;
    Write iodev1,"  "\NoNewLine;
    Write iodev1,CDate()\NoNewLine;
    Write iodev1,"  "\NoNewLine;
    Write iodev1,CTime();
    Close iodev1;
  ENDPROC

  !*****************************************************
  ! Log a simple warning in robot message log.
  ! Header:  max 24 characters
  ! Message: max 40 characters
  !*****************************************************
  PROC LogWarn(string header,string reason)
    ErrWrite \ W, header,reason;
  ENDPROC
ENDMODULE
