%%%
  VERSION:1
  LANGUAGE:ENGLISH
%%%

MODULE NumArray(SYSMODULE,NOSTEPIN)

  !*****************************************************
  ! * Copyright (C) 2013 Robert Andersson <rob@ernell.se>
  ! *
  ! * Licensed under the Apache License, Version 2.0 (the "License");
  ! * you may not use this file except in compliance with the License.
  ! * You may obtain a copy of the License at
  ! *
  ! *      http://www.apache.org/licenses/LICENSE-2.0
  ! *
  ! * Unless required by applicable law or agreed to in writing, software
  ! * distributed under the License is distributed on an "AS IS" BASIS,
  ! * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! * See the License for the specific language governing permissions and
  ! * limitations under the License.
  !*****************************************************

  !*****************************************************
  ! Module Name: LIB_NARRAY
  ! Version:     0.1b (not yet tested)
  ! Description: Dynamic array (as dynamic as it gets)
  !              - Stack functions (push & pop)
  !              -
  !              -
  ! Date:        2013-12-24
  ! Author:      Robert Andersson <rob@ernell.se>
  ! Internet:    http://github.com/ernell/ABB-RAPID-UTILITY-LIBRARY
  !*****************************************************

  ! Max size of array. Configure to your needs.
  LOCAL CONST num MAX_ARRAY_SIZE:=128;
  ! The array itself
  LOCAL VAR num array{128};
  ! Size of the values stored in array.
  LOCAL VAR num size:=0;

  !*********************************
  ! Get current size of array
  !*********************************
  FUNC num numa_get_size()
    RETURN size;
  ENDFUNC

  !*********************************
  ! Get maximum size of array
  !*********************************
  FUNC num numa_get_maxsize()
    RETURN MAX_ARRAY_SIZE;
  ENDFUNC
  
  !*********************************
  ! Get a value from array. Stop the program if index out of bounds.
  !*********************************
  FUNC num numa_get(num index)
    RETURN array{index};
  ERROR
    IF ERRNO=ERR_OUTOFBND THEN
      ErrWrite "ERROR: OUTOFBND","Array index is out of bounds." \RL2:="Index={"+NumToStr(index,0)+"}" \RL3:="Array size="+NumToStr(MAX_ARRAY_SIZE,0);
      Stop;
    ENDIF
  ENDFUNC

  !*********************************
  ! Get last inserted value from array
  !*********************************
  FUNC num numa_last()
    RETURN array{size};
  ENDFUNC

  !*********************************
  ! Stack function. Get value at index 1 and then left shift the array.
  !*********************************
  FUNC num numa_pop()
    VAR num value;
    
    value:=array{1};
    numa_lsh;
    RETURN value;
  ENDFUNC

  !*********************************
  ! Stack function. First right shift the array, and then insert at index 1.
  !*********************************
  PROC numa_push(num value)
    numa_rsh;
    array{1}:=value;
  ENDPROC

  !*********************************
  ! Reset all values to 0, set size to 0.
  !*********************************
  PROC numa_reset()
    size:=0;
    FOR i FROM 1 to MAX_ARRAY_SIZE DO
      array{i}:=0;
    ENDFOR
  ENDPROC

  !*********************************
  ! Insert a new value at last position of array, but only if size allows it.
  !*********************************
  PROC numa_insert(num value)
    IF size<MAX_ARRAY_SIZE THEN
      Add size,1;
      array{size}:=value;
    ENDIF
  ENDPROC

  !*********************************
  ! Print a list with the array elements.
  !*********************************
  PROC numa_list()
     FOR i FROM 1 TO size DO
      TPWrite "numa{" + NumToStr(i,0) + "}=" + numtostr(array{i},7);
    ENDFOR
  ENDPROC

  !*********************************
  ! Left shift. The value at index 1 will be lost.
  !*********************************
  LOCAL PROC numa_lsh()
    FOR i FROM 1 TO MAX_ARRAY_SIZE-1 DO
      array{i}:=array{i+1};
    ENDFOR
    array{MAX_ARRAY_SIZE}:=0;
    Add size,-1;
  ENDPROC

  !*********************************
  ! Right shift. The value at index {MAX_ARRAY_SIZE} will be lost.
  !*********************************
  LOCAL PROC numa_rsh()
    FOR i FROM MAX_ARRAY_SIZE TO 2 STEP -1 DO
      array{i}:=array{i-1};
    ENDFOR
    array{1}:=0;
    Add size,1;
  ENDPROC
ENDMODULE
