%%%
  VERSION:1
  LANGUAGE:ENGLISH
%%%

MODULE LIB_SORT(SYSMODULE,NOSTEPIN)

  !*****************************************************
  ! * Copyright (C) 2013 Robert Andersson <rob@ernell.se>
  ! *
  ! * Licensed under the Apache License, Version 2.0 (the "License");
  ! * you may not use this file except in compliance with the License.
  ! * You may obtain a copy of the License at
  ! *
  ! *      http://www.apache.org/licenses/LICENSE-2.0
  ! *
  ! * Unless required by applicable law or agreed to in writing, software
  ! * distributed under the License is distributed on an "AS IS" BASIS,
  ! * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! * See the License for the specific language governing permissions and
  ! * limitations under the License.
  !*****************************************************

  !*****************************************************
  ! Module Name: LIB_SORT
  ! Version:     0.12b (not yet tested)
  ! Description: Sorting lib.
  !              - Various data swap functions
  !              -
  ! Date:        2014-09-02
  ! Author:      Robert Andersson <rob@ernell.se>
  ! Internet:    http://github.com/ernell/ABB-RAPID-UTILITY-LIBRARY
  !*****************************************************

  !*****************************************************
  ! Swap the values of two num objects
  !*****************************************************
  PROC swap_num(INOUT num value1,INOUT num value2)
    VAR num tmp;
    
    tmp:=value1;
    value1:=value2;
    value2:=tmp;
  ENDPROC

  !*****************************************************
  ! Swap the values of two pos ojects
  !*****************************************************
  PROC swap_pos(INOUT pos value1,INOUT pos value2)
    VAR pos tmp;
    
    tmp:=value1;
    value1:=value2;
    value2:=tmp;
  ENDPROC

  !*****************************************************
  ! Compare with +/- tolerance.
  ! Example:
  !           bool result:=cmp(100,101);
  !           result will be FALSE
  !
  !           bool result:=cmp(100,101\tol:=1);
  !           result will be TRUE, since 100 fits within limits (100-102)
  !           
  !           Tolerance is applied on second value.
  !*****************************************************
  LOCAL FUNC bool cmp(num value1,num value2,\num tol)
    VAR num tolerance;
    
    IF Present(tol) THEN
      IF value1>=(value2-tol) AND value1<=(value2+tol) RETURN TRUE;
      RETURN FALSE;
    ENDIF
    IF value1=value2 RETURN TRUE;
    RETURN FALSE;
  ENDFUNC
  
  !*****************************************************
  ! Reverse the elements of an array of num (first=last)
  !*****************************************************
  PROC rev_num_array(INOUT num array{*})
    VAR num tmp;
    VAR num size;
    VAR num count:=0;
    
    size:=Dim(array,1);
    WHILE count<size DO
        swap_num array{count},array{size};
        Incr count;
        Decr size;
    ENDWHILE
  ENDPROC

  !*****************************************************
  ! Reverse the elements of an array of pos (first=last)
  !*****************************************************
  PROC rev_pos_array(INOUT pos array{*})
    VAR pos tmp;
    VAR num size;
    VAR num count:=0;
    
    size:=Dim(array,1);
    WHILE count<size DO
        swap_pos array{count},array{size};
        Incr count;
        Decr size;
    ENDWHILE
  ENDPROC
ENDMODULE
