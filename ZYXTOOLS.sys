%%%
  VERSION:1
  LANGUAGE:ENGLISH
%%%

MODULE ZYXTOOLS(SYSMODULE,NOSTEPIN)

  !*****************************************************
  ! * Copyright (C) 2013 Robert Andersson <rob@ernell.se>
  ! *
  ! * Licensed under the Apache License, Version 2.0 (the "License");
  ! * you may not use this file except in compliance with the License.
  ! * You may obtain a copy of the License at
  ! *
  ! *      http://www.apache.org/licenses/LICENSE-2.0
  ! *
  ! * Unless required by applicable law or agreed to in writing, software
  ! * distributed under the License is distributed on an "AS IS" BASIS,
  ! * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! * See the License for the specific language governing permissions and
  ! * limitations under the License.
  !*****************************************************

  !*****************************************************
  ! Module Name: ZYXTOOLS
  ! Version:     0.1b
  ! Description: 
  !              Chapter 1: misc. functions
  !              Chapter 2: tooldata functions
  !              Chapter 3: wobjdata functions
  !              Chapter 4: loaddata functions
  !              Chapter 5: zonedata functions
  !              
  ! Date:        2013-12-18
  ! Author:      Robert Andersson <rob@ernell.se>
  ! Internet:    http://github.com/ernell/ABB-RAPID-UTILITY-LIBRARY
  !*****************************************************

  !*****************************************************
  !
  ! Chapter 1: misc. functions
  !
  !*****************************************************

  !*****************************************************
  ! Get the normalization error from an orientation
  !*****************************************************
  LOCAL FUNC num get_rot_err(orient rot)
    RETURN Abs(Sqrt(Pow(rot.q1,2)+Pow(rot.q2,2)+Pow(rot.q3,2)+Pow(rot.q4,2)));
  ENDFUNC

  !*****************************************************
  ! Normalize orientation if needed, switch for perfect orientations
  ! "NoTol" stands for "No Tolerance"
  !*****************************************************
  PROC FixOrient(INOUT orient rot,\switch NoTol)
    VAR num err;
    
    err:=get_rot_err(rot);
    IF Present(NoTol) THEN
      ! error > 0.00001 AND err <= 0.1
      ! Slightly unnormalised orientation, but still usable, fix it anyway
      IF (err>0.00001) AND (err<=0.1) rot:=NOrient(rot);
    ELSE
      ! error > 0.1 Orientation is unusable, fix it
      IF err>0.1 rot:=NOrient(rot);
    ENDIF
    ! error<=0.00001 Normalised, do nothing
  ENDPROC

  !*****************************************************
  !
  ! Chapter 2: tooldata
  !
  !*****************************************************

  !*****************************************************
  ! Set orientation angle on tooldata from euler angles
  !*****************************************************
  PROC SetToolZYX(INOUT tooldata object,num z,num y,num x)
    object.tframe.rot:=OrientZYX(z,y,x);
  ENDPROC

  !*****************************************************
  ! Set orientation angle on tooldata with quaternion (orient object)
  !*****************************************************
  PROC SetToolOrient(INOUT tooldata object,orient value)
    object.tframe.rot:=value;
  ENDPROC

  !*****************************************************
  ! Get orientation from tooldata as an orient object
  !*****************************************************
  FUNC orient GetToolOrient(tooldata object)
    RETURN object.tframe.rot;
  ENDFUNC

  !*****************************************************
  ! Set mass on tooldata
  !*****************************************************
  PROC SetToolMass(INOUT tooldata object,num value)
    object.tload.mass:=value;
  ENDPROC

  !*****************************************************
  ! Get tool mass from tooldata
  !*****************************************************
  FUNC num GetToolMass(tooldata object)
    RETURN object.tload.mass;
  ENDFUNC

  !*****************************************************
  ! Set tool loaddata
  !*****************************************************
  PROC SetToolLoad(INOUT tooldata object,loaddata value)
    object.tload:=value;
  ENDPROC

  !*****************************************************
  ! Get tool loaddata
  !*****************************************************
  FUNC loaddata GetToolLoad(tooldata object)
    RETURN object.tload;
  ENDFUNC

  !*****************************************************
  ! Set Centre Of Gravity on tool loaddata
  !*****************************************************
  PROC SetToolCOG(INOUT tooldata object,pos value)
    object.tload.cog:=[value.x,value.y,value.z];
  ENDPROC

  !*****************************************************
  ! Get Centre Of Gravity from tool loaddata
  !*****************************************************
  FUNC pos GetToolCOG(tooldata object)
    RETURN object.tload.cog;
  ENDFUNC

  !*****************************************************
  ! Set tool frame translation
  !*****************************************************
  PROC SetToolFrame(INOUT tooldata object,num x,num y,num z)
    object.tframe.trans.x:=x;
    object.tframe.trans.y:=y;
    object.tframe.trans.z:=z;
  ENDPROC

  !*****************************************************
  ! Add tool frame translation
  !*****************************************************
  PROC AddToolFrame(INOUT tooldata object,num x,num y,num z)
    Add object.tframe.trans.x,x;
    Add object.tframe.trans.y,y;
    Add object.tframe.trans.z,z;
  ENDPROC

  !*****************************************************
  !
  ! Chapter 3: wobjdata
  !
  !*****************************************************

  !*****************************************************
  ! Set orientation angle on a workobject with euler angles
  !*****************************************************
  PROC SetWObjZYX(INOUT wobjdata object,num z,num y,num x)
    object.oframe.rot:=OrientZYX(z,y,x);
  ENDPROC

  !*****************************************************
  ! Set oframe translation
  !*****************************************************
  PROC SetWObjOFrame(INOUT wobjdata object,num x,num y,num z)
    object.oframe.trans.x:=x;
    object.oframe.trans.y:=y;
    object.oframe.trans.z:=z;
  ENDPROC

  !*****************************************************
  ! Set uframe translation
  !*****************************************************
  PROC SetWObjUFrame(INOUT wobjdata object,num x,num y,num z)
    object.uframe.trans.x:=x;
    object.uframe.trans.y:=y;
    object.uframe.trans.z:=z;
  ENDPROC

  !*****************************************************
  ! Add oframe translation
  !*****************************************************
  PROC AddWObjOFrame(INOUT wobjdata object,num x,num y,num z)
    Add object.oframe.trans.x,x;
    Add object.oframe.trans.y,y;
    Add object.oframe.trans.z,z;
  ENDPROC

  !*****************************************************
  ! Add uframe translation
  !*****************************************************
  PROC AddWObjUFrame(INOUT wobjdata object,num x,num y,num z)
    Add object.uframe.trans.x,x;
    Add object.uframe.trans.y,y;
    Add object.uframe.trans.z,z;
  ENDPROC
   
  !*****************************************************
  !
  ! Chapter 4: loaddata
  !
  !*****************************************************

  !*****************************************************
  ! Set Centre Of Gravity on loaddata
  !*****************************************************
  PROC SetLoadCOG(INOUT loaddata object,pos value)
    object.cog:=[value.x,value.y,value.z];
  ENDPROC

  !*****************************************************
  ! Get Centre Of Gravity from loaddata as a pos
  !*****************************************************
  FUNC pos GetLoadCOG(loaddata object)
    RETURN object.cog;
  ENDFUNC

  !*****************************************************
  ! Set loaddata mass
  !*****************************************************
  PROC SetLoadMass(INOUT loaddata object,num value)
    object.mass:=value;
  ENDPROC

  !*****************************************************
  ! Get loaddata mass
  !*****************************************************
  FUNC num GetLoadMass(loaddata object)
    RETURN object.mass;
  ENDFUNC

  !*****************************************************
  ! Set loaddata inertia with a pos
  !*****************************************************
  PROC SetLoadInertia(INOUT loaddata object,pos value)
    object.ix:=value.x;
    object.iy:=value.y;
    object.iz:=value.z;
  ENDPROC

  !*****************************************************
  ! Get loaddata inertia as a pos
  !*****************************************************
  FUNC pos GetLoadInertia(loaddata object)
    VAR pos value:=[0,0,0];
    
    value.x:=object.ix;
    value.y:=object.iy;
    value.z:=object.iz;
    RETURN value;
  ENDFUNC

  !*****************************************************
  !
  ! Chapter 5: zonedata
  !
  !*****************************************************

  !*****************************************************
  ! Set zone as "Fine point"
  !*****************************************************
  PROC SetZoneFine(INOUT zonedata object)
    object.finep:=TRUE;
  ENDPROC

  !*****************************************************
  ! Set zone as "Fly by"
  !*****************************************************
  PROC SetZoneFlyby(INOUT zonedata object)
    object.finep:=FALSE;
  ENDPROC

  !*****************************************************
  ! Path zone TCP
  !*****************************************************
  PROC SetPZoneTCP(INOUT zonedata object,num value)
    object.pzone_tcp:=value;
  ENDPROC

  !*****************************************************
  ! Path zone orientation
  !*****************************************************
  PROC SetPZoneOrient(INOUT zonedata object,num value)
    object.pzone_ori:=value;
  ENDPROC

  !*****************************************************
  ! Path zone orientation external axes
  !*****************************************************
  PROC SetPZoneEAx(INOUT zonedata object,num value)
    object.pzone_eax:=value;
  ENDPROC

  !*****************************************************
  ! Zone orientation
  !*****************************************************
  PROC SetZoneOrient(INOUT zonedata object,num value)
    object.zone_ori:=value;
  ENDPROC

  !*****************************************************
  ! Zone linear external axes
  !*****************************************************
  PROC SetZoneLEAx(INOUT zonedata object,num value)
    object.zone_leax:=value;
  ENDPROC

  !*****************************************************
  ! Zone rotational external axes
  !*****************************************************
  PROC SetZoneREAx(INOUT zonedata object,num value)
    object.zone_reax:=value;
  ENDPROC
ENDMODULE
