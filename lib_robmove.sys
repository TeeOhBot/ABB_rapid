MODULE lib_robmove(SYSMODULE)
  !*****************************************************
  ! * Copyright (C) 2015 Robert Andersson <rob@ernell.se>
  ! *
  ! * Licensed under the Apache License, Version 2.0 (the "License");
  ! * you may not use this file except in compliance with the License.
  ! * You may obtain a copy of the License at
  ! *
  ! *      http://www.apache.org/licenses/LICENSE-2.0
  ! *
  ! * Unless required by applicable law or agreed to in writing, software
  ! * distributed under the License is distributed on an "AS IS" BASIS,
  ! * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! * See the License for the specific language governing permissions and
  ! * limitations under the License.
  !*****************************************************

  !*****************************************************
  ! Module Name: lib_robmove
  ! Description: various robot special moves
  ! Date:        2015-03-05
  ! Author:      Robert Andersson <rob@ernell.se>
  ! Internet:    http://github.com/ernell/ABB-RAPID-UTILITY-LIBRARY
  !*****************************************************
    
  !*****************************************************
  ! Rotate around tool X-axis
  !*****************************************************
  PROC ToolRotX(PERS tooldata pTool,num rot_x)
    ToolRot pTool,rot_x,0,0;
  ENDPROC

  !*****************************************************
  ! Rotate around tool Y-axis
  !*****************************************************
  PROC ToolRotY(PERS tooldata pTool,num rot_y)
    ToolRot pTool,0,rot_y,0;
  ENDPROC

  !*****************************************************
  ! Rotate around tool Z-axis
  !*****************************************************
  PROC ToolRotZ(PERS tooldata pTool,num rot_z)
    ToolRot pTool,0,0,rot_z;
  ENDPROC

  !*****************************************************
  ! Rotate around tool X+Y+Z-axis
  !*****************************************************
  PROC ToolRot(PERS tooldata pTool,num rot_x,num rot_y,num rot_z,\speeddata pSpeed)
    VAR robtarget current_pos;
    VAR num input:=0;
    VAR speeddata speed:=[100,100,5000,1000];
    
    ! error check
    IF rot_x>=180 OR rot_y>=180 OR rot_z>=180 THEN
      TPErase;
      TPWrite "Cannot rotate 180+ degrees!";
      TPWrite "The robot cannot decide";
      TPWrite "which direction to rotate.";
      TPReadFK input,"","","","[OK]","","";
      RETURN;
    ENDIF
    
    IF Present(pSpeed) speed:=pSpeed;

    current_pos:=CRobT(\Tool:=pTool);
    current_pos:=CRobT(\Tool:=pTool);
    ConfL \Off;
    MoveL RelTool (current_pos, 0, 0, 0 \Rx:=rot_x\Ry:=rot_y\Rz:=rot_z), speed, fine, pTool;
    ConfL \On;
  ENDPROC

  !*****************************************************
  ! Move TCP linear in XYZ-axis
  !*****************************************************
  PROC ToolXYZ(PERS tooldata pTool,num trans_x,num trans_y,num trans_z,\speeddata pSpeed)
    VAR robtarget current_pos;
    VAR speeddata speed;
    
    IF Present(pSpeed) speed:=pSpeed;
    current_pos:=CRobT(\Tool:=pTool);
    current_pos:=CRobT(\Tool:=pTool);
    ConfL \Off;
    MoveL RelTool (current_pos, trans_x,trans_y,trans_z), speed, fine, pTool;
    ConfL \On;
  ENDPROC

  !*****************************************************
  ! RTPSearch (Reltool Precision Search)
  !
  ! Version: 2015-02-24
  ! 
  ! Description:
  !   Do a precision search for a laserbeam
  !
  ! Arguments:
  !   pSignal:     the digital input from sensor
  !   pOffset:     endpos offset from current position
  !   pTool        the tooldata to use
  !    \WObj
  !    \pSlomoSpeed
  !    \pSlowSpeed
  !    \pFastSpeed
  !
  ! Return:
  !   robtarget search end position
  !*****************************************************
  FUNC robtarget RTPSearch(VAR signaldi pSignal,pos pOffset,PERS tooldata pTool \PERS wobjdata WObj\speeddata pSlowSpeed\speeddata pFastSpeed\speeddata pSlomoSpeed)
    VAR robtarget here_we_are;
      
      WaitTime\InPos,0.1;
      here_we_are:=CRobT(\Tool:=pTool \WObj?WObj);
    RETURN PSearch(pSignal,RelTool(here_we_are,pOffset.x,pOffset.y,pOffset.z),pTool \WObj?WObj\pSlowSpeed?pSlowSpeed\pFastSpeed?pFastSpeed\pSlomoSpeed?pSLomoSpeed);
  ENDFUNC

  !*****************************************************
  ! PSearch (Precision Search)
  !
  ! Version: 2015-02-27
  ! 
  ! Description:
  !   Do a precision search for a laserbeam
  !
  ! Arguments:
  !   pSignal:     the digital input from sensor
  !   pEndPoint:   endpos
  !   pTool        the tooldata to use
  !    \WObj
  !    \pSlomoSpeed
  !    \pSlowSpeed
  !    \pFastSpeed
  !
  ! Return:
  !   robtarget search end position
  !*****************************************************
  FUNC robtarget PSearch(VAR signaldi pSignal,robtarget pEndPoint,PERS tooldata pTool \PERS wobjdata WObj\speeddata pSlowSpeed\speeddata pFastSpeed\speeddata pSlomoSpeed)
    VAR robtarget pStart;
    VAR robtarget pResult{2};
    VAR robtarget pFinalRes;
    VAR speeddata fast_speed:=[15,100,5000,1000];
    VAR speeddata slow_speed:=[2.5,100,5000,1000];
    VAR speeddata slomo_speed:=[0.2,100,5000,1000];
    
    IF Present(pSlomoSpeed) slomo_speed:=pSlomoSpeed;
    IF Present(pSlowSpeed) slow_speed:=pSlowSpeed;
    IF Present(pFastSpeed) fast_speed:=pFastSpeed;

    WaitTime\InPos,0.2;
    ! store start position
    pStart:=CRobT(\Tool:=pTool \WObj?WObj);

    ! fast search and stop, not using the result
    SearchL\PStop,pSignal\Flanks,pResult{1},pEndPoint,fast_speed,pTool \WObj?WObj;
    WaitTime\InPos,0.2;
    
    ! backwards slow search and stop, not using the result
    SearchL\PStop,pSignal\Flanks,pResult{1},pStart,slow_speed,pTool \WObj?WObj;
    WaitTime\InPos,0.2;

    ! very slow search forward until signal change
    SearchL\PStop,pSignal\Flanks,pResult{1},pEndPoint,slomo_speed,pTool \WObj?WObj;
    WaitTime\InPos,0.2;
    !TPWrite "pRes{1}="\Pos:=pResult{1}.trans;
    
    ! very slow search backwards until signal change
    SearchL\PStop,pSignal\Flanks,pResult{2},pStart,slomo_speed,pTool \WObj?WObj;
    WaitTime\InPos,0.4;
    !TPWrite "pRes{2}="\Pos:=pResult{2}.trans;

    pFinalRes:=MidPos(pResult{1},pResult{2});
    TPWrite "PSearch="\Pos:=pFinalRes.trans;
    ! return mid-position for best accuracy
    RETURN pFinalRes;
  ENDFUNC

  !*****************************************************
  ! RTSearch (RelToolSearch)
  !
  ! Version: 2015-01-20
  ! 
  ! Description:
  !   Do a search for a laserbeam (or any sensor) from where the tool is right now
  !   Endpoint is an offset in any direction
  !   Search is done in several steps.
  !   1. quick search to find beam
  !   2. slow search backwards until signal flank (stored in p0)
  !   3. slow search forward until signal flank   (stored in p1)
  !   4. A position in between p0 & p1 is calculated with MidPos(p0,p1) for best accuracy
  !
  ! Arguments:
  !   pSignal: the digital input from sensor
  !   pOffset: endpos offset from current position
  !   pTool:   the tooldata to use
  !
  ! Return:
  !   robtarget search end position
  !*****************************************************
  FUNC robtarget RTSearch(VAR signaldi pSignal,VAR pos pOffset,PERS tooldata pTool \PERS wobjdata WObj)
    VAR robtarget p0;
    VAR robtarget p1;
    VAR robtarget result;
    VAR robtarget ro_start;
    VAR robtarget temppos;
    VAR speeddata speed;
    VAR num dist:=5;
    VAR num slow_dist:=3;
   
    ! let the robot calm down and stop shaking
    WaitTime 0.5;
    
    ! store start position
    ro_start:=CRobT(\Tool:=pTool \WObj?WObj);
    ro_start:=CRobT(\Tool:=pTool \WObj?WObj);
    WaitTime\Inpos,0.2;
    
    ! config
    ConfL\Off;

    ! move to startposition
    MoveL ro_start,v100,fine,pTool \WObj?WObj;
    WaitTime\Inpos,0.2;

    ! set fast search speed
    speed:=[10,100,5000,1000];
    
    ! quick search towards the offset scanning for a signal
    SearchL\PStop,pSignal\Flanks,p1,RelTool(ro_start,pOffset.x,pOffset.y,pOffset.z),speed, pTool \WObj?WObj;
    WaitTime\Inpos,0.2;
    ! p0 is where the robot comes to an complete stop, not same point as p1
    p0:=CRobT(\Tool:=pTool \WObj?WObj);
    ! set slow search speed
    speed:=[1.0,100,5000,1000];
    ! move halfway back to the found point (to decrease searchtime)
    MoveL MidPos(p0,p1),speed,fine,pTool \WObj?WObj;
    WaitTime\Inpos,0.2;

    ! slow search away from sensor, wait for signal=0, result->p0
    SearchL\PStop,pSignal\Flanks,p0,ro_start,speed, pTool \WObj?WObj;
    WaitTime\Inpos,0.2;

    ! slow search towards sensor, wait for signal=1, result->p1
    SearchL\PStop,pSignal\Flanks,p1,RelTool(ro_start,pOffset.x,pOffset.y,pOffset.z),speed, pTool \WObj?WObj;
    WaitTime\Inpos,0.2;

    ! final result: calulate a position between p0 & p1 for best accuracy
    result:=MidPos(p0,p1);

    ! move back to start position before returning the result
    AccSet 10,10;
    MoveL ro_start,v50,fine,pTool \WObj?WObj;
    AccSet 100,100;
    WaitTime\Inpos,0.2;

    ! config
    ConfL\On;

    RETURN result;
  ERROR
    IF ERRNO = ERR_WHLSEARCH THEN
      TPErase;
      TPWrite "Error: ERR_WHLSEARCH";
      TPWrite "Endpoint reached without signal.";
      TPWrite "[OK] to retry";
      PressOK;
      ! Move back to start position
      MoveL ro_start,v10,fine,pTool \WObj?WObj;
      WaitTime 1.0;
      RETRY;
    ENDIF
  ENDFUNC
   
  !*****************************************************
  ! Can we reach the robtarget with the specified tool/wobj (optional)
  ! Return: TRUE/FALSE
  !*****************************************************
  FUNC bool IsReachable(robtarget pTarget,PERS tooldata pTool \PERS wobjdata WObj)
    VAR bool result:=TRUE;
    VAR jointtarget tJoints;
    
    tJoints:=CalcJointT(pTarget,pTool \WObj?WObj);
    RETURN result;
  ERROR
    IF ERRNO=ERR_ROBLIMIT THEN
      SkipWarn;
      result:=FALSE;
      TRYNEXT;
    ENDIF
  ENDFUNC
ENDMODULE
